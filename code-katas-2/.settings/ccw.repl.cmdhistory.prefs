cmdhistory=["(require code-katas-2.core-test)" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(fn [[a b]] [b (+ a b)])" "(fn [[0 1]] [b (+ a b)])" "(defn p [[a b]] [b (+ a b)])" "(p 0 1)" "(p [0 1])" "(p [1 2])" "(p [1 1])" "[b (+ 1 2)]" "[b (+ a b)]" "(p [0 1])" "(parcial 1)" "(parcial + 1)" "(partial + 1)" "((partial + 1)2)" "((partial + 1)3)" "(((partial + 1)3)4)" "((partial + 1)3)" "((partial + 2)3)" "((partial + )3)" "((partial +)3)" "((partial +) (1 2 3))" "((reduce (partial +) (1 2 3)))" "((reduce \#(partial + %) (1 2 3)))" "((reduce \#(partial + %) '(1 2 3)))" "((reduce (partial + ) '(1 2 3)))" "((map \#(partial + %) '(1 2 3)))" "((map (partial + ) '(1 2 3)))" "((iterate (partial + ) '(1 2 3)))" "((iterate (partial +) '(1 2 3)))" "((map (partial + ) '(1 2 3)))" "((partial +)3)" "((partial *)3)" "((partial -)3)" "((partial (+ 2))3)" "((partial (+ 2 (*2)))3)" "((partial (+ 2 (* 2 2)))3)" "((partial (+ 2 (+ 2 2))) 2)" "(partial (+ 2 (+ 2 2)))" "((partial (+ 2 (+ 2 2))) 3)" "((partial +)3)" "((partial + 1)3)" "(unpartial map)" "(unpartial map 5)" "(unpartial map)" "((partial + 1)3)" "(unpartial 5)" "(unpartial 5 map)" "((partial + 1)3)" "((partial -)3)" "((partial map)3)" "((partial iterate)3)" "((partial iterate))" "((partial -) 5)" "(require \:reoload-all 'code-katas-2.core)" "(require \:reload-all 'code-katas-2.core)" "((unpartial -) 5)" "((unpartial +) 5)" "(eval (map))" "(map)" "(require \:roload-all 'code-katas-2.core)" "(require \:reload-all 'code-katas-2.core)" "((unpartial +) 5)" "(+ (unpartial +) 5)" "(require \:reload-all 'code-katas-2.core)" "(+ (unpartial +) 5)" "(require \:reload-all 'code-katas-2.core)" "(+ (unpartial +) 5)" "((unpartial + 5) 5)" "((partial + 5) 5)" "((unpartial + 5) 5)" "(require \:reload-all 'code-katas-2.core)" "((unpartial + 5) 5)" "((unpartial +) 5)" "((unpartial -) 5)" "((unpartial *) 5)" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(require \:reload-all 'code-katas-2.core)" "((unpartial - 5) 5)" "((unpartial -) 5)" "((unpartial + 5) 5)" "((unpartial + 5 6 6) 5)" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "((unpartial -) 1 2 5 3 6)" "((unpartial -) 1 2 5 3 7)" "((unpartial -) 1 2 5 3 6)" "((unpartial -) 1 2 5 3 )" "((unpartial -)2 5 3)" "((unpartial -)2 5 )" "((unpartial -)10 5 )" "((unpartial +)10 5 )" "((unpartial +)10 5 1 2 2 5 6)" "((unpartial +)10 5 1 2 2)" "((unpartial +) '(10 5 1 2 2))" "((unpartial +)10 5 1 2 2)" "(require \:reload-all 'code-katas-2.core)" "((unpartial +)10 5 1 2 2)" "((unpartial +) 10 )" "(require \:reload-all 'code-katas-2.core)" "((unpartial +)10 5 1 2 2)" "((unpartial (fn [a] (fn [b](/ a b)))) 1 2 3)" "(firter \#(\= %1 %2) [1] [2])" "(firter \#(\= %1 %2) [1 2] [2])" "(firter \#(\= %1 %2) [1 2])" "(filter \#(\= %1 %2) [1 2])" "(filter \#(\=\= %1 %2) [1 2])" "(filter (fn [a b] (\= a b)) [1 2])" "(filter (fn [a b] (\= a b)) [1 2 3 6])" "(filter (fn [a b] (\=\= a b)) [1 2 3 6])" "(filter (fn [a b] (\=\= a b)) '(1 2 3 6))" "(filter odd? '(1 2 3 6))" "(filter (fn [a b] (\= a b)) '(1 2 3 6))" "(filter ((fn [a b] (\= a b))) '(1 2 3 6))" "(map (fn [a ] (* a)) '(1 2 3 6))" "(map (fn [a ] (* 2 a)) '(1 2 3 6))" "(length [])" "(. length [])" "(.length [])" "(.length \\"a\\")" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3])" "(intern [1 2 3] [12 2 5])" "(into [1 2 3] [12])" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3])" "(alength [1 2 3])" "(length [1 2 3])" "(search [1 2 3] [1 2 35])" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3] [1 2 35])" "(map first [1 2 3])" "(map (first [1 2 3]))" "(map (fn [v] (first v)) [[1 2 3] [1 2 3]])" "(map (fn [v] (first v)) [[1 2 3] [ 2 3]])" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3] [1 2 35])" "(interleave [1 2 3])" "(apply str [[1 2 3] [1 2 3]])" "(apply vec [[1 2 3] [1 2 3]])" "(apply list [[1 2 3] [1 2 3]])" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3] [1 2 35])" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3] [1 2 35])" "(search [1 2 3])" "(search [ 2 3])" "(require \:reload-all 'code-katas-2.core)" "(search [ 2 3])" "(require \:reload-all 'code-katas-2.core)" "(search [ 2 3])" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(interleave [22 5 3] [1 5 2])" "(interleave [22 5 3] [1 5 2 5 6])" "(reduce inc [1 2 3])" "(reduce + [1 2 3])" "(map + [1 2 3])" "(map (+ 1) [1 2 3])" "(map \#(+ % 1) [1 2 3])" "(set [1 2 3])" "(filter (set [1 2 3 4 5 6 7 8 9])(set [0.5 3/2 7 19]))" "(filter (set (range) (range 0 100 7/6) [10 23 31 42 72 182]))" "(filter (set (range)) (set (range 0 100 7/6)) (set [10 23 31 42 72 182]))" "(first (filter (set (range)) (set (range 0 100 7/6)) (set [10 23 31 42 72 182])))" "(first (lazy-seq(filter (set (range)) (set (range 0 100 7/6)) (set [10 23 31 42 72 182]))))" "(filter (set (range)) (set (range 0 100 7/6)) (set [10 23 31 42 72 182]))" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)) (set [10 23 31 42 72 182]))" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)))" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)) (set [10 23 31 42 72 182]))" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)) )" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)) '( 1 2 3))" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)) '(1 2 3))" "(filter (set '(5 6 6 )) (set '( 0 100 7/6)))" "(filter (set [1 2 3 4 5 6 7 8 9])(set [0.5 3/2 7 19]))" "(filter (set [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19]))" "(filter (set [1 2 3 4 5 6 7 8 9]) [0.5 3/2 7 19])" "(filter (set [1 2 3 4 5 6 7 8 9]) [0.5 3/2 7 19] [1 2 3])" "(apply sorted-set { 1 5 3 5 8 2})" "(apply sorted-set { 1 5 3 5 8 })" "(apply sorted-set { 1 5 3 5 8 2})" "(apply set { 1 5 3 5 8 2})" "(apply { 1 5 3 5 8 2} { 1 2 3 })" "(apply {} { 1 2 3 })" "(apply vec { 1 2 3 })" "(clojure.set/intersection [1 2 3] [1 5 3])" "(clojure.set/intersection {1 2 3} {1 5 3})" "(apply \#{} { 1 2 3})" "(clojure.set/intersection {1 2 3} {1 2 5})" "(clojure.set/intersection \#{1 2 3} \#{1 2 5})" "(clojure.set/intersection \#{1 2 3 5} \#{1 2 5})" "(clojure.set/intersection \#{1 2 3 5} \#{1 2 5} \#{1 2 3 5 7})" "(clojure.set/intersection \#{1 2 3 5} \#{1 2 5} \#{1 2 3 7})" "(first \#{1 2})" "(clojure.set/intersection \#{1 2 3 5} \#{1 2 5} [1 2 3])" "(require \:reload-all 'code-katas-2.core)" "(search [1 2 3])" "(search [1 2 3] 1 2 3)" "(search [1 2 3] [1 2 3])" "(search [[1 2 3] [1 2 3]])" "(search [[1 2 3] [5 2 3]])" "(map set [1 2 3])" "(map  apply set [1 2 3])" "(clojure.set/intersection \#{[1 2 3] [5 2 3]})" "(clojure.set/intersection  (apply set \#{[1 2 3] [5 2 3]}))" "(set [1 2 3])" "(map  (apply (set [1 2 3])))" "(fn [v] (set v))" "(fn [[1 2 3]] (set [1 2 3]))" "(def pp (fn [v] (set v)))" "(pp [1 2 3])" "(map pp [[1 2 3][4 5 6][7 8 9]])" "(map pp [(2 3)[4 5 6][7 8 9]])" "(map pp ['(2 3)[4 5 6][7 8 9]])" "(apply set (map pp ['(2 3)[4 5 6][7 8 9]]))" "(apply str (map pp ['(2 3)[4 5 6][7 8 9]]))" "(clojure.set/intersection  (apply set \#{[1 2 3] [5 2 3]}))" "(clojure.set/intersection [1 2 3] [5 2 3])" "(clojure.set/intersection {1 2 3} {5 2 3})" "(clojure.set/intersection \#{1 2 3} \#{5 2 3})" "(map pp ['(2 3)[4 5 6][7 8 9]])" "(clojure.set/intersection & map pp ['(2 3)[4 5 6][7 8 9]])" "(clojure.set/intersection & (map pp ['(2 3)[4 5 6][7 8 9]]))" "(clojure.set/intersection &(map pp ['(2 3)[4 5 6][7 8 9]]))" "(def a-set (set(map pp ['(2 3)[4 5 6][7 8 9]])))" "(print a-set)" "(clojure.set/intersection &a-set)" "(clojure.set/intersection & a-set)" "(clojure.set/intersection  a-set)" "(clojure.set/intersection  (apply a-set))" "(clojure.set/intersection (apply set a-set))" "(clojure.set/intersection (apply (fn [v](set v)) a-set))" "(clojure.set/intersection (apply (fn [v](set v)) [1 2 3 5 6] [4 5 6 8 9]))" "(clojure.set/intersection (apply (fn [v](set v)) [[1 2 3 5 6] [4 5 6 8 9]]))" "(clojure.set/intersection & a-set)" "(clojure.set/intersection &(map pp ['(2 3)[4 5 6][7 8 9]]))" "(clojure.set/intersection (reduce {}(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (map {}(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (iterate {}(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (filter {}(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (map {}(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (reduce {}(map pp [[4 5 6][7 8 9]])))" "(def pp (fn [v] (set v)))" "(clojure.set/intersection (reduce {}(map pp [[4 5 6][7 8 9]])))" "(take 10 (clojure.set/intersection (iterate {}(map pp [[4 5 6][7 8 9]]))))" "(clojure.set/intersection (filter {}(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (filter set?(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (apply set?(map pp [[4 5 6][7 8 9]])))" "(take 10 (clojure.set/intersection (reduce set?(map pp [[4 5 6][7 8 9]]))))" "(clojure.set/intersection ((map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (set (map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (map pp [[4 5 6][7 8 9]]))" "(clojure.set/intersection ((map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection (map pp [[4 5 6][7 8 9]]))" "(clojure.set/intersection (vec(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection &(vec(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection & (vec(map pp [[4 5 6][7 8 9]])))" "(clojure.set/intersection & (map pp [[4 5 6][7 8 9]]))" "(def pp (fn [v] (set v)))" "(clojure.set/intersection & (map pp [[4 5 6][7 8 9]]))" "(clojure.set/intersection (map pp [[4 5 6][7 8 9]]))" "(clojure.set/intersection (nth (map pp [[4 5 6][7 8 9]]) 0) (nth (map pp [[4 5 6][7 8 9]]) 1))" "(clojure.set/intersection (nth (map pp [[4 5 6 9][7 8 9]]) 0) (nth (map pp [[4 5 6][7 8 9]]) 1))" "(lazy-seq (first (clojure.set/intersection (nth (map pp [[1 5 6 9][1 8 9]]) 0) (nth (map pp [[4 5 6][7 8 9]]) 1))))" "(lazy-seq (first (clojure.set/intersection (nth (map pp [(range 0 20) [1 2 3 5 6]]) 0) (nth (map pp [[4 5 6][7 8 9]]) 1))))" "(lazy-seq (first (clojure.set/intersection (nth (map pp [(range 0 20) [1 2 3 5 6]]) 0))))" "(clojure.set/intersection (nth (map pp [[4 5 6][7 8 9]]) 0) (nth (map pp [[4 5 6][7 8 9]]) 1))" "(clojure.set/intersection (nth (map pp [[1 5 9][7 8 9]]) 0) (nth (map pp [[1 5 9][7 8 9]]) 1))" "(clojure.set/intersection (nth (map pp [[1 5 9][7 8 9]]) 0) (nth (map pp [[1 5 9][ 1 7 8 9]]) 1))" "(first(clojure.set/intersection (nth (map pp [[1 5 9][7 8 9]]) 0) (nth (map pp [[1 5 9][ 1 7 8 9]]) 1)))" "(lazy-seq (first(clojure.set/intersection (nth (map pp [[1 5 9][7 8 9]]) 0) (nth (map pp [[1 5 9][ 1 7 8 9]]) 1))))" "(first(lazy-seq(clojure.set/intersection (nth (map pp [[1 5 9][7 8 9]]) 0) (nth (map pp [[1 5 9][ 1 7 8 9]]) 1))))" "(def p (lazy-seq(set (range))))" "(def p (set (range)))" "(+ 1 2)" "(def p (lazy-seq(set (range))))" "(nth p 5)" "(def p (lazy-seq(set (range))))" "(+ 1 2)" "(nth p 5)" "(+ 1 2)" "(lazy-seq(def p (set (range))))" "(def p (lazy-seq(set (range))))" "(def (lazy-seq p (set (range))))" "(def p (lazy-seq(set (range))))" "(+ 1 2)" "(nth l 5)" "(take 10 p)" "(length [])" "(.length [])" "length []" "(length [])" "(count [])" "(count [1])" "( \= (count [1]) 1)" "( \= (count [1]) 1 0)" "( \= (count [1]) 10)" "( \= (count [1]) 1 1)" "( \= (count [1]) 1  2)" "  (if (or (\= (count []) 0) (\= (count [] 1)))\\r\\n    secuencia\\r\\n  )" "  (if (or (\= (count []) 0) (\= (count [] 1)))\\r\\n    []\\r\\n  )" "( \= (count [1]) 1  2)" "(eval (or (\= (count []) 0) (\= (count [] 1))))" "(or (\= (count []) 0) (\= (count [] 1)))" "( (\= (count []) 0) or (\= (count [] 1)))" "(or(\= (count []) 0) or (\= (count [] )1))" "(or(\= (count []) 0) or (\= (count [])1))" "(eval(or(\= (count []) 0) or (\= (count [])1)))" "(def sequencia [1])" "(cond \\r\\n    (\= (count secuencia) 0) secuencia\\r\\n    (\= (count secuencia) 1) secuencia\\r\\n    )" "  (cond \\r\\n    (\= (count secuencia) 0) secuencia\\r\\n    (\= (count secuencia) 1) secuencia\\r\\n    else\:()\\r\\n  )" "(or true false)" "(or false false)" "(if (or (\= (count []) 0) (\= (count []) 1)) \\"si\\" \\"no\\")" "(if (or (\= (count []) 1) (\= (count []) 12)) \\"si\\" \\"no\\")" "([])" "(eval [])" "(eval '())" "(def list [1 2 3])" "list" "(if true \:hola)" "(if false \:hola)" "(if false \:hola \\"\\")" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3])" "(intercalar < \:menor [])" "(intercalar < \:menor [1])" "(intercalar < \:menor [8])" "(conj [] 5)" "(conj [] 6)" "(conj [1 2 5 6] 5)" "(conj [1 2 5 6] 9)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 6])" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 7 8])" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(conj [1 2 5] 60)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(print (intercalar < \:menor [1 2 5 3 8]))" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(def p [])" "(def p (conj p \:a))" "(print p)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(nth [1 2 5] 2)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3 8])" "(def vector (atom []))" "vector" "(conj vector 50)" "(conj vector \\"50\\")" "(swap\!  vector \\"50\\")" "(swap\!  vector conj 1)" "(swap\!  vector conj 2)" "(swap\!  vector conj 3)" "(swap\! vector conj 3)" "(dotimes [loops (count vector)] (swap\! vector conj loops))" "(dotimes [loops (.length vector)] (swap\! vector conj loops))" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(intercalar [])" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(require 'code-katas-2.core-test)" "(intercalar + \:mas [])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:mayor [1])" "(intercalar < \:mayor [1 2])" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(search [2 3 8] )" "(search [2 3 8] [ 2 5])" "(apply list 1 2 3)" "(apply list '(1 2 3))" "(apply list [1 2 3])" "(apply conj [1 2 3] 5)" "(apply conj [1 2 3] )" "(apply str [1 2 3] )" "(apply set [1 2 3] )" "(apply ver [1 2 3])" "(name \:p)" "\:p" "(conj\! [1 2 5 60 8] 9)" "(conj\! [1 2 5 60 8] )" "(conj\! '(1 2 5 60 8) 5)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 6])" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 5 3])" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(l vector 2)" "(vector 2)" "(into [] (vector 3))" "(def l [])" "(l into (vector 3))" "(l (into  (vector 3)))" "(into l (vector 3))" "(into l (vector 5))" "(def l (into l (vector 5)))" "(def l (into l (vector 9)))" "(def l (into l (vector 8)))" "(print l)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(count [])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(def p (range ))" "(+ 1 2)" "(lazy-seq (def p (range)))" "(def p (set (range)))" "(+ 1 2)" "(def p (lazy-seq (set (range))))" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(rest [])" "(rest '())" "(first'())" "(first [])" "(first '())" "(conj p nil)" "p" "(def p [])" "(def k [1 2 5 3])" "(def kk (complement k))" "kk" "(print kk)" "(def list [])" "(conj list 1 2 3)" "(conj list 4)" "(print list)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(println (str \\"oy\\"))" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(cons [] 2)" "(cons 2 [] )" "(cons 6 [] )" "(def p [])" "(cons 6 p)" "(cons 8 p)" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [1 2 3 5 2])" "(intercalar < \:menor [2 6 9 4 3])" "(require \:reload-all 'code-katas-2.core)" "(intercalar < \:menor [2 6 9 4 3])" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)" "(require \:reload-all 'code-katas-2.core-test)" "(run-tests)" "(intercalar < \:menor [2 6 9 4 3])" "(intercalar (take 12 (->> [0 1]\\r\\n                       (iterate (fn [[a b]] [b (+ a b)]))\\r\\n                       (map first)\\r\\n                       (k/intercalar (fn [a b]\\r\\n                                        (\= (mod a 2) (mod b 2)))\\r\\n                                      \:igual)))\\n            \\n            )" "(intercalar (take 12 (->> [0 1]\\r\\n                       (iterate (fn [[a b]] [b (+ a b)]))\\r\\n                       (map first)\\r\\n                       (k/intercalar (fn [a b]\\r\\n                                        (\= (mod a 2) (mod b 2)))\\r\\n                                      \:igual))))" "(require \:reload-all 'code-katas-2.core)" "(require 'code-katas-2.core-test)" "(in-ns 'code-katas-2.core-test)" "(run-tests)"]
eclipse.preferences.version=1
